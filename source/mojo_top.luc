module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock    
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)    
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full  
    input button_reset,  
    input button_right,
    input button_up,
    input button_down,
    input button_left,
    input button_select,  
    
    output seg_1[7],
    output seg_2[7],
    output rows[7],
    //output red[7],
    output green[7],
    output blue[7]
  ) {
  
  sig rst;                  // reset signal
  alu alu;
  
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    edge_detector edge_detector_right(#RISE(1), #FALL(0));
    button_conditioner button_cond_right;
    edge_detector edge_detector_up(#RISE(1), #FALL(0));
    button_conditioner button_cond_up;
    edge_detector edge_detector_down(#RISE(1), #FALL(0));
    button_conditioner button_cond_down;
    edge_detector edge_detector_left(#RISE(1), #FALL(0));
    button_conditioner button_cond_left;
    edge_detector edge_detector_select(#RISE(1), #FALL(0));
    button_conditioner button_cond_select;
    edge_detector edge_detector_reset(#RISE(1), #FALL(0));
    button_conditioner button_cond_reset;
    
    
    .rst(rst){
        display display;
        position position;
        seven_Seg score;
        dff row[7][7]; 
        dff move_counter[16]; 
        dff posit[16];  
        dff check[1];
        fsm state = {FIRST, GAME, SELECT};

    }
    
    
  }

  always {
    
    button_cond_right.in = button_right;
    edge_detector_right.in = button_cond_right.out;
    button_cond_up.in = button_up;
    edge_detector_up.in = button_cond_up.out;
    button_cond_down.in = button_down;
    edge_detector_down.in = button_cond_down.out;
    button_cond_left.in = button_left;
    edge_detector_left.in = button_cond_left.out;
    button_cond_select.in = button_select;
    edge_detector_select.in = button_cond_select.out;
    button_cond_reset.in = button_reset;
    edge_detector_reset.in = button_cond_reset.out;
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset

    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    alu.a=0;
    alu.b=0;
    //alu.alufn=110011;
    alu.alufn=0;
    
    
    if (posit.q < 1){
      posit.d = 25;
    }
    position.posit = posit.q;
    
    case(state.q){
      state.FIRST:
        row.d[0] = 7b0011100;
        row.d[1] = 7b0011100;
        row.d[2] = 7b1111111;
        row.d[3] = 7b1110111;
        row.d[4] = 7b1111111;
        row.d[5] = 7b0011100;
        row.d[6] = 7b0011100;
        state.d = state.GAME;
    
      state.GAME: //Moving mode
        if(edge_detector_up.out){//up
          alu.a=posit.q;
          alu.b=7;
          alu.alufn=1;
          if(alu.out < 1 || alu.out > 49 || alu.out == 1 || alu.out == 2 || alu.out == 6 || alu.out ==7 || alu.out ==8 || alu.out ==9 || alu.out ==13 || alu.out ==8 || alu.out ==9 || alu.out ==13 || alu.out ==14 || alu.out ==49 || alu.out ==48 || alu.out ==44 || alu.out ==43 || alu.out ==42 || alu.out ==41 || alu.out ==37 || alu.out ==36){}
          else{posit.d = alu.out;}
          }
        if(edge_detector_down.out){//down
          alu.a=posit.q;
          alu.b=7;
          alu.alufn=0;
          if(alu.out < 1 || alu.out > 49 || alu.out == 1 || alu.out == 2 || alu.out == 6 || alu.out ==7 || alu.out ==8 || alu.out ==9 || alu.out ==13 || alu.out ==8 || alu.out ==9 || alu.out ==13 || alu.out ==14 || alu.out ==49 || alu.out ==48 || alu.out ==44 || alu.out ==43 || alu.out ==42 || alu.out ==41 || alu.out ==37 || alu.out ==36){}
          else{posit.d = alu.out;}}
        if(edge_detector_right.out){//right
          alu.a=posit.q;
          alu.b=1;
          alu.alufn=0;
          if(alu.out < 1 || alu.out > 49 || alu.out == 1 || alu.out == 2 || alu.out == 6 || alu.out ==7 || alu.out ==8 || alu.out ==9 || alu.out ==13 || alu.out ==8 || alu.out ==9 || alu.out ==13 || alu.out ==14 || alu.out ==49 || alu.out ==48 || alu.out ==44 || alu.out ==43 || alu.out ==42 || alu.out ==41 || alu.out ==37 || alu.out ==36){}
          else{posit.d = alu.out;}}
        if(edge_detector_left.out){//left
          alu.a=posit.q;
          alu.b=1;
          alu.alufn=1;
          if(alu.out < 1 || alu.out > 49 || alu.out == 1 || alu.out == 2 || alu.out == 6 || alu.out ==7 || alu.out ==8 || alu.out ==9 || alu.out ==13 || alu.out ==8 || alu.out ==9 || alu.out ==13 || alu.out ==14 || alu.out ==49 || alu.out ==48 || alu.out ==44 || alu.out ==43 || alu.out ==42 || alu.out ==41 || alu.out ==37 || alu.out ==36){}
          else{posit.d = alu.out;}}
        if(edge_detector_select.out){
          state.d = state.SELECT;}
        if(edge_detector_reset.out){//reset
          move_counter.d=0;
          state.d=state.FIRST;}
          
      state.SELECT: // Select mode
        alu.a=row.q[position.row-1][7-position.column];
        alu.b=0;
        alu.alufn=6b110011;
        check.d=alu.out;
        if(check.q){
            state.d=state.GAME;}
        else if(position.row==1 && position.column==3){
            if(edge_detector_up.out){//up
                state.d=state.GAME;}
            if(edge_detector_down.out){//down
                if(row.q[position.row][7-position.column]==1 && row.q[position.row+1][7-position.column]==0){
                     row.d[position.row][7-position.column] = 0;
                     row.d[position.row+1][7-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
             if(edge_detector_right.out){//right
                if(row.q[position.row-1][6-position.column]==1 && row.q[position.row-1][5-position.column]==0){
                     row.d[position.row-1][6-position.column] = 0;
                     row.d[position.row-1][5-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
             if(edge_detector_left.out){//left
                state.d=state.GAME;}
          }
          
          else if(position.row==1 && position.column==4){
            if(edge_detector_up.out){//up
                state.d=state.GAME;}
            if(edge_detector_down.out){//down
                if(row.q[position.row][7-position.column]==1 && row.q[position.row+1][7-position.column]==0){
                     row.d[position.row][7-position.column] = 0;
                     row.d[position.row+1][7-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
             if(edge_detector_right.out){//right
                state.d=state.GAME;}
             if(edge_detector_left.out){//left
                state.d=state.GAME;}
          }
          
          else if(position.row==1 && position.column==5){
            if(edge_detector_up.out){//up
                state.d=state.GAME;}
            if(edge_detector_down.out){//down
                if(row.q[position.row][7-position.column]==1 && row.q[position.row+1][7-position.column]==0){
                     row.d[position.row][7-position.column] = 0;
                     row.d[position.row+1][7-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
             if(edge_detector_right.out){//right
                state.d=state.GAME;}
             if(edge_detector_left.out){//left
                if(row.q[position.row-1][8-position.column]==1 && row.q[position.row-1][9-position.column]==0){
                     row.d[position.row-1][8-position.column] = 0;
                     row.d[position.row-1][9-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
          }
      
          else if(position.row==2 && position.column==3){
            if(edge_detector_up.out){//up
                state.d=state.GAME;}
            if(edge_detector_down.out){//down
                if(row.q[position.row][7-position.column]==1 && row.q[position.row+1][7-position.column]==0){
                     row.d[position.row][7-position.column] = 0;
                     row.d[position.row+1][7-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
             if(edge_detector_right.out){//right
                if(row.q[position.row-1][6-position.column]==1 && row.q[position.row-1][5-position.column]==0){
                     row.d[position.row-1][6-position.column] = 0;
                     row.d[position.row-1][5-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
             if(edge_detector_left.out){//left
                state.d=state.GAME;}
          }
          
          else if(position.row==2 && position.column==4){
            if(edge_detector_up.out){//up
                state.d=state.GAME;}
            if(edge_detector_down.out){//down
                if(row.q[position.row][7-position.column]==1 && row.q[position.row+1][7-position.column]==0){
                     row.d[position.row][7-position.column] = 0;
                     row.d[position.row+1][7-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
             if(edge_detector_right.out){//right
                state.d=state.GAME;}
             if(edge_detector_left.out){//left
                state.d=state.GAME;}
          }
          
          else if(position.row==2 && position.column==5){
            if(edge_detector_up.out){//up
                state.d=state.GAME;}
            if(edge_detector_down.out){//down
                if(row.q[position.row][7-position.column]==1 && row.q[position.row+1][7-position.column]==0){
                     row.d[position.row][7-position.column] = 0;
                     row.d[position.row+1][7-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
             if(edge_detector_right.out){//right
                state.d=state.GAME;}
             if(edge_detector_left.out){//left
                if(row.q[position.row-1][8-position.column]==1 && row.q[position.row-1][9-position.column]==0){
                     row.d[position.row-1][8-position.column] = 0;
                     row.d[position.row-1][9-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
          }
       
          else if(position.row==3 && position.column==1){
            if(edge_detector_up.out){//up
                state.d=state.GAME;}
            if(edge_detector_down.out){//down
                if(row.q[position.row][7-position.column]==1 && row.q[position.row+1][7-position.column]==0){
                     row.d[position.row][7-position.column] = 0;
                     row.d[position.row+1][7-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
             if(edge_detector_right.out){//right
               if(row.q[position.row-1][6-position.column]==1 && row.q[position.row-1][5-position.column]==0){
                     row.d[position.row-1][6-position.column] = 0;
                     row.d[position.row-1][5-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
             if(edge_detector_left.out){//left
                state.d=state.GAME;}
          }
      
          else if(position.row==3 && position.column==2){
            if(edge_detector_up.out){//up
                state.d=state.GAME;}
            if(edge_detector_down.out){//down
                if(row.q[position.row][7-position.column]==1 && row.q[position.row+1][7-position.column]==0){
                     row.d[position.row][7-position.column] = 0;
                     row.d[position.row+1][7-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
             if(edge_detector_right.out){//right
                if(row.q[position.row-1][6-position.column]==1 && row.q[position.row-1][5-position.column]==0){
                     row.d[position.row-1][6-position.column] = 0;
                     row.d[position.row-1][5-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
             if(edge_detector_left.out){//left
                state.d=state.GAME;}
          }
      
          else if(position.row==4 && position.column==1){
            if(edge_detector_up.out){//up
                state.d=state.GAME;}
            if(edge_detector_down.out){//down
                state.d=state.GAME;}
             if(edge_detector_right.out){//right
                if(row.q[position.row-1][6-position.column]==1 && row.q[position.row-1][5-position.column]==0){
                     row.d[position.row-1][6-position.column] = 0;
                     row.d[position.row-1][5-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
             if(edge_detector_left.out){//left
                state.d=state.GAME;}
          }
      
          else if(position.row==4 && position.column==2){
            if(edge_detector_up.out){//up
                state.d=state.GAME;}
            if(edge_detector_down.out){//down
                state.d=state.GAME;}
             if(edge_detector_right.out){//right
                if(row.q[position.row-1][6-position.column]==1 && row.q[position.row-1][5-position.column]==0){
                     row.d[position.row-1][6-position.column] = 0;
                     row.d[position.row-1][5-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
             if(edge_detector_left.out){//left
                state.d=state.GAME;}
          }
      
          else if(position.row==5 && position.column==1){
            if(edge_detector_up.out){//up
                if(row.q[position.row-2][7-position.column]==1 && row.q[position.row-3][7-position.column]==0){
                     row.d[position.row-2][7-position.column] = 0;
                     row.d[position.row-3][7-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
            if(edge_detector_down.out){//down
                state.d=state.GAME;}
             if(edge_detector_right.out){//right
                if(row.q[position.row-1][6-position.column]==1 && row.q[position.row-1][5-position.column]==0){
                     row.d[position.row-1][6-position.column] = 0;
                     row.d[position.row-1][5-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
             if(edge_detector_left.out){//left
                state.d=state.GAME;}
          }
      
          else if(position.row==5 && position.column==2){
            if(edge_detector_up.out){//up
                if(row.q[position.row-2][7-position.column]==1 && row.q[position.row-3][7-position.column]==0){
                     row.d[position.row-2][7-position.column] = 0;
                     row.d[position.row-3][7-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
            if(edge_detector_down.out){//down
                state.d=state.GAME;}
             if(edge_detector_right.out){//right
                if(row.q[position.row-1][6-position.column]==1 && row.q[position.row-1][5-position.column]==0){
                     row.d[position.row-1][6-position.column] = 0;
                     row.d[position.row-1][5-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
             if(edge_detector_left.out){//left
                state.d=state.GAME;}
          }
      
          else if(position.row==6 && position.column==3){
            if(edge_detector_up.out){//up
                if(row.q[position.row-2][7-position.column]==1 && row.q[position.row-3][7-position.column]==0){
                     row.d[position.row-2][7-position.column] = 0;
                     row.d[position.row-3][7-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
            if(edge_detector_down.out){//down
                state.d=state.GAME;}
             if(edge_detector_right.out){//right
                if(row.q[position.row-1][6-position.column]==1 && row.q[position.row-1][5-position.column]==0){
                     row.d[position.row-1][6-position.column] = 0;
                     row.d[position.row-1][5-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
             if(edge_detector_left.out){//left
                state.d=state.GAME;}
          }
      
          else if(position.row==6 && position.column==4){
            if(edge_detector_up.out){//up
                if(row.q[position.row-2][7-position.column]==1 && row.q[position.row-3][7-position.column]==0){
                     row.d[position.row-2][7-position.column] = 0;
                     row.d[position.row-3][7-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
            if(edge_detector_down.out){//down
                state.d=state.GAME;}
             if(edge_detector_right.out){//right
                state.d=state.GAME;}
             if(edge_detector_left.out){//left
                state.d=state.GAME;}
          }
      
          else if(position.row==6 && position.column==5){
            if(edge_detector_up.out){//up
                if(row.q[position.row-2][7-position.column]==1 && row.q[position.row-3][7-position.column]==0){
                     row.d[position.row-2][7-position.column] = 0;
                     row.d[position.row-3][7-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
            if(edge_detector_down.out){//down
                state.d=state.GAME;}
             if(edge_detector_right.out){//right
                state.d=state.GAME;}
             if(edge_detector_left.out){//left
                if(row.q[position.row-1][8-position.column]==1 && row.q[position.row-1][9-position.column]==0){
                     row.d[position.row-1][8-position.column] = 0;
                     row.d[position.row-1][9-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
          }
      
          else if(position.row==7 && position.column==3){
            if(edge_detector_up.out){//up
                if(row.q[position.row-2][7-position.column]==1 && row.q[position.row-3][7-position.column]==0){
                     row.d[position.row-2][7-position.column] = 0;
                     row.d[position.row-3][7-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
            if(edge_detector_down.out){//down
                state.d=state.GAME;}
             if(edge_detector_right.out){//right
                if(row.q[position.row-1][6-position.column]==1 && row.q[position.row-1][5-position.column]==0){
                     row.d[position.row-1][6-position.column] = 0;
                     row.d[position.row-1][5-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
             if(edge_detector_left.out){//left
                state.d=state.GAME;}
          }
      
          else if(position.row==7 && position.column==4){
            if(edge_detector_up.out){//up
                if(row.q[position.row-2][7-position.column]==1 && row.q[position.row-3][7-position.column]==0){
                     row.d[position.row-2][7-position.column] = 0;
                     row.d[position.row-3][7-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
            if(edge_detector_down.out){//down
                state.d=state.GAME;}
             if(edge_detector_right.out){//right
                state.d=state.GAME;}
             if(edge_detector_left.out){//left
                state.d=state.GAME;}
          }
      
          else if(position.row==7 && position.column==5){
            if(edge_detector_up.out){//up
                if(row.q[position.row-2][7-position.column]==1 && row.q[position.row-3][7-position.column]==0){
                     row.d[position.row-2][7-position.column] = 0;
                     row.d[position.row-3][7-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
            if(edge_detector_down.out){//down
                state.d=state.GAME;}
             if(edge_detector_right.out){//right
                state.d=state.GAME;}
             if(edge_detector_left.out){//left
                 if(row.q[position.row-1][8-position.column]==1 && row.q[position.row-1][9-position.column]==0){
                     row.d[position.row-1][8-position.column] = 0;
                     row.d[position.row-1][9-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
          }
      
          else if(position.row==3 && position.column==6){
            if(edge_detector_up.out){//up
                state.d=state.GAME;}
            if(edge_detector_down.out){//down
                if(row.q[position.row][7-position.column]==1 && row.q[position.row+1][7-position.column]==0){
                     row.d[position.row][7-position.column] = 0;
                     row.d[position.row+1][7-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
             if(edge_detector_right.out){//right
                state.d=state.GAME;}
             if(edge_detector_left.out){//left
                if(row.q[position.row-1][8-position.column]==1 && row.q[position.row-1][9-position.column]==0){
                     row.d[position.row-1][8-position.column] = 0;
                     row.d[position.row-1][9-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
          }
      
          else if(position.row==3 && position.column==7){
            if(edge_detector_up.out){//up
                state.d=state.GAME;}
            if(edge_detector_down.out){//down
                if(row.q[position.row][7-position.column]==1 && row.q[position.row+1][7-position.column]==0){
                     row.d[position.row][7-position.column] = 0;
                     row.d[position.row+1][7-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
             if(edge_detector_right.out){//right
                state.d=state.GAME;}
             if(edge_detector_left.out){//left
                if(row.q[position.row-1][8-position.column]==1 && row.q[position.row-1][9-position.column]==0){
                     row.d[position.row-1][8-position.column] = 0;
                     row.d[position.row-1][9-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
          }
      
          else if(position.row==4 && position.column==6){
            if(edge_detector_up.out){//up
                state.d=state.GAME;}
            if(edge_detector_down.out){//down
                state.d=state.GAME;}
             if(edge_detector_right.out){//right
                state.d=state.GAME;}
             if(edge_detector_left.out){//left
                if(row.q[position.row-1][8-position.column]==1 && row.q[position.row-1][9-position.column]==0){
                     row.d[position.row-1][8-position.column] = 0;
                     row.d[position.row-1][9-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
          }
      
          else if(position.row==4 && position.column==7){
            if(edge_detector_up.out){//up
                state.d=state.GAME;}
            if(edge_detector_down.out){//down
                state.d=state.GAME;}
             if(edge_detector_right.out){//right
                state.d=state.GAME;}
             if(edge_detector_left.out){//left
                if(row.q[position.row-1][8-position.column]==1 && row.q[position.row-1][9-position.column]==0){
                     row.d[position.row-1][8-position.column] = 0;
                     row.d[position.row-1][9-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
          }
      
          else if(position.row==5 && position.column==6){
            if(edge_detector_up.out){//up
                if(row.q[position.row-2][7-position.column]==1 && row.q[position.row-3][7-position.column]==0){
                     row.d[position.row-2][7-position.column] = 0;
                     row.d[position.row-3][7-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
            if(edge_detector_down.out){//down
                state.d=state.GAME;}
             if(edge_detector_right.out){//right
                state.d=state.GAME;}
             if(edge_detector_left.out){//left
                if(row.q[position.row-1][8-position.column]==1 && row.q[position.row-1][9-position.column]==0){
                     row.d[position.row-1][8-position.column] = 0;
                     row.d[position.row-1][9-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
          }
      
          else if(position.row==5 && position.column==7){
            if(edge_detector_up.out){//up
                if(row.q[position.row-2][7-position.column]==1 && row.q[position.row-3][7-position.column]==0){
                     row.d[position.row-2][7-position.column] = 0;
                     row.d[position.row-3][7-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
            if(edge_detector_down.out){//down
                state.d=state.GAME;}
             if(edge_detector_right.out){//right
                state.d=state.GAME;}
             if(edge_detector_left.out){//left
                if(row.q[position.row-1][8-position.column]==1 && row.q[position.row-1][9-position.column]==0){
                     row.d[position.row-1][8-position.column] = 0;
                     row.d[position.row-1][9-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
          }
          else{
            if(edge_detector_up.out){//up
                if(row.q[position.row-2][7-position.column]==1 && row.q[position.row-3][7-position.column]==0){
                     row.d[position.row-2][7-position.column] = 0;
                     row.d[position.row-3][7-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
            if(edge_detector_down.out){//down
                if(row.q[position.row][7-position.column]==1 && row.q[position.row+1][7-position.column]==0){
                     row.d[position.row][7-position.column] = 0;
                     row.d[position.row+1][7-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
             if(edge_detector_right.out){//right
                if(row.q[position.row-1][6-position.column]==1 && row.q[position.row-1][5-position.column]==0){
                     row.d[position.row-1][6-position.column] = 0;
                     row.d[position.row-1][5-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}
             if(edge_detector_left.out){//left
                if(row.q[position.row-1][8-position.column]==1 && row.q[position.row-1][9-position.column]==0){
                     row.d[position.row-1][8-position.column] = 0;
                     row.d[position.row-1][9-position.column]= 1;
                     row.d[position.row-1][7-position.column] = 0;
                     alu.a = move_counter.q;
                     alu.b = 1;
                     alu.alufn=0;
                     move_counter.d = alu.out;
                     state.d=state.GAME;
                }else{state.d=state.GAME;}}}
          
      
      
            if(edge_detector_reset.out){//reset
                move_counter.d=0;
                state.d=state.FIRST;}
        
    }
    score.move_counter = move_counter.q;
    
    
    display.blue[0] = row.q[0];
    display.blue[1] = row.q[1];
    display.blue[2] = row.q[2];
    display.blue[3] = row.q[3];
    display.blue[4] = row.q[4];
    display.blue[5] = row.q[5];
    display.blue[6] = row.q[6];
    display.green = position.green;


    seg_1 = ~ score.out_ones;
    seg_2 = ~ score.out_tens;
    green = display.out_green;
    blue = display.out_blue;
    rows = display.rows; 

    
  }
}